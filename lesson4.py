#!/usr/bin/env python
# coding: utf-8

# Тема “Визуализация данных в Matplotlib”
# 
# Задание 1
# Загрузите модуль pyplot библиотеки matplotlib с псевдонимом plt, а также библиотеку numpy с псевдонимом np.
# Примените магическую функцию %matplotlib inline для отображения графиков в Jupyter Notebook и настройки конфигурации ноутбука со значением 'svg' для более четкого отображения графиков.
# Создайте список под названием x с числами 1, 2, 3, 4, 5, 6, 7 и список y с числами 3.5, 3.8, 4.2, 4.5, 5, 5.5, 7.
# С помощью функции plot постройте график, соединяющий линиями точки с горизонтальными координатами из списка x и вертикальными - из списка y.
# Затем в следующей ячейке постройте диаграмму рассеяния (другие названия - диаграмма разброса, scatter plot).
# 

# In[1]:


import numpy as np
from matplotlib import pyplot as plt


# In[2]:


get_ipython().run_line_magic('matplotlib', 'inline')


# In[3]:


get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'svg'")


# In[4]:


x = np.arange(1, 8)
y = np.array([3.5, 3.8, 4.2, 4.5, 5, 5.5, 7])
print(x, y)


# In[5]:


plt.plot(x, y)
plt.show()


# In[6]:


plt.scatter(x, y)
plt.show()


# Задание 2
# С помощью функции linspace из библиотеки Numpy создайте массив t из 51 числа от 0 до 10 включительно. Создайте массив Numpy под названием f, содержащий косинусы элементов массива t. Постройте линейную диаграмму, используя массив t для координат по горизонтали,а массив f - для координат по вертикали. Линия графика должна быть зеленого цвета. Выведите название диаграммы - 'График f(t)'. Также добавьте названия для горизонтальной оси - 'Значения t' и для вертикальной - 'Значения f'. Ограничьте график по оси x значениями 0.5 и 9.5, а по оси y - значениями -2.5 и 2.5.

# In[7]:


t = np.linspace(0, 10, 51)
f = np.cos(t)


# In[8]:


plt.plot(t, f, color='green')
plt.title('График f(t)')
plt.xlabel('Значения t')
plt.ylabel('Значения f')
plt.axis([0.5, 9.5, -2.5, 2.5])
plt.show()


# *Задание 3
# С помощью функции linspace библиотеки Numpy создайте массив x из 51 числа от -3 до 3 включительно.
# Создайте массивы y1, y2, y3, y4 по следующим формулам:
# y1 = x**2
# y2 = 2 * x + 0.5
# y3 = -3 * x - 1.5
# y4 = sin(x)
# Используя функцию subplots модуля matplotlib.pyplot, создайте объект matplotlib.figure.Figure с названием fig и массив объектов Axes под названием ax,причем так, чтобы у вас было 4 отдельных графика в сетке, состоящей из двух строк и двух столбцов. В каждом графике массив x используется для координат по горизонтали.В левом верхнем графике для координат по вертикали используйте y1,в правом верхнем - y2, в левом нижнем - y3, в правом нижнем - y4.Дайте название графикам: 'График y1', 'График y2' и т.д.
# Для графика в левом верхнем углу установите границы по оси x от -5 до 5.
# Установите размеры фигуры 8 дюймов по горизонтали и 6 дюймов по вертикали.
# Вертикальные и горизонтальные зазоры между графиками должны составлять 0.3.
# 

# In[9]:


x = np.linspace(-3, 3, 51)
y1 = x ** 2
y2 = 2 * x + 0.5
y3 = -3 * x - 1.5
y4 = np.sin(x)


# In[10]:


fig, ax = plt.subplots(nrows=2, ncols=2)
fig.set_size_inches(8, 6)
fig.subplots_adjust(wspace=0.3, hspace=0.3)
ax1, ax2, ax3, ax4 = ax.flatten()
ax1.plot(x, y1)
ax1.set_xlim([-5, 5])
ax1.set_title('График y1')
ax2.plot(x, y2)
ax2.set_title('График y2')
ax3.plot(x, y3)
ax3.set_title('График y3')
ax4.plot(x, y4)
ax4.set_title('График y4')


# 

# **Задание на повторение материала
# Создать одномерный массив Numpy под названием a из 12 последовательных целых чисел чисел от 12 до 24 невключительно
# 

# In[20]:


a = np.linspace(12, 23, 12, dtype='int32')
print(a)


# Создать 5 двумерных массивов разной формы из массива a. Не использовать в аргументах метода reshape число -1.

# In[22]:


a1 = a.reshape(2, 6)
print(a1)


# In[21]:


a2 = a.reshape(3, 4)
print(a2)


# In[23]:


a3 = a.reshape(4, 3)
print(a3)


# In[24]:


a4 = a.reshape(6, 2)
print(a4)


# In[25]:


a5 = a.reshape(12, 1)
print(a5)


# In[ ]:




